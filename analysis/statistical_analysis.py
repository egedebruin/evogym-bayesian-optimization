import numpy as np
import scipy.stats as stats
import pandas as pd
from itertools import combinations

# Your raw data goes here
raw_data = [[[92.44002259609762, 93.84920117190792, 97.70759322398267, 94.6485999865471, 95.83597395141706, 112.98592338595705, 97.6954029004947, 102.54774481699786, 111.51123004962909, 96.43033677392482], [116.73880045450694, 106.3087851645623, 118.4206642520889, 106.4841014808093, 103.3392936791348, 108.51645359591136, 101.25557869526473, 116.40940175704243, 119.23630079752002, 112.52382452755103], [113.52966063792371, 111.27577806697661, 106.51899874992459, 111.04935532886024, 117.08187241575027, 123.43127711982093, 125.89174161941096, 125.30863766667639, 95.23122916219096, 91.73511692577735], [92.6852083272037, 102.11756169952943, 114.98664344529023, 117.64684186393677, 127.3242584691263, 118.59260522324391, 104.10991369288904, 110.90659457691, 127.54151975226455, 119.23525467617709], [98.2524651364004, 99.17946248376062, 95.75934214474174, 98.15064470105115, 88.71593877053867, 96.4820574226706, 102.34671269187295, 115.3374953917685, 100.66405110974029, 93.4088167072822], [110.18031270155517, 110.36090064334716, 100.50985988001453, 101.45226776356053, 112.04464979322086, 120.23177828571387, 118.45503063631845, 102.12648548944625, 77.81850986924853, 127.42674367118022], [115.95588022696934, 101.0701804739886, 100.93851393964138, 115.67932054842841, 127.88963299995594, 122.51983204673773, 117.2463563347597, 112.28924123484663, 126.20918199599868, 108.8550967635824], [126.03839982879505, 121.55555905397021, 106.97026424265195, 108.65952047309271, 114.52072690051787, 123.81414304664032, 115.33269091922757, 110.46497717178434, 123.90877852755082, 134.43308210339106]],
[[42.97079301413391, 46.701181984144355, 44.19291431880007, 43.086057963335605, 41.35617513040586, 40.66498493706928, 43.472320921479465, 42.189728492372595, 47.572305133898794, 47.95348489820859], [49.87829682847594, 41.849421591549024, 46.02823651574502, 47.379848397379774, 45.212110800500035, 42.41493096066949, 47.80954241980201, 45.71972179115992, 43.45619839221173, 44.96123275092581], [44.92848518597617, 54.881867986269064, 45.50536629649917, 46.055655703555196, 46.263655137399844, 53.74354625834033, 48.43172559426971, 44.57689036168581, 46.074245542324455, 47.96769864428354], [47.07078420660787, 43.30940343544091, 45.97665633472966, 45.79135920708429, 43.31029606294014, 43.667927437845414, 45.22790933620633, 40.86497780184199, 48.21589937129475, 49.74498076748271], [43.688734857367244, 43.376862950581874, 40.57059821126268, 45.790945483856405, 43.80935993094759, 39.782511723596336, 42.760239570221195, 49.53475416464949, 42.60438172638132, 39.93237208780217], [47.532808254960436, 59.794834288071556, 44.7064638012222, 40.32676916265799, 44.117032182635825, 40.439889605148416, 41.166285507042645, 41.613568797828464, 47.55856086369731, 40.23727500336576], [49.264410055095716, 42.715848942334105, 43.2750259104885, 47.38014933594706, 42.23871326435592, 45.07393395410588, 44.91693425788808, 46.73661071248337, 44.396617383517814, 48.693439571215144], [46.923638168793644, 49.17654606981054, 49.34722738613927, 41.389247008807025, 49.481342410101604, 49.544874783351624, 49.54334726883247, 47.45073039261747, 44.63181833633873, 49.47533108148245]],
[[68.46201745936095, 64.94079591906915, 69.58548180515673, 56.03096657000406, 71.08492600748423, 70.46787828966798, 78.45792042249049, 58.375363351908504, 68.85770588537484, 66.01536650109516], [84.64037658057138, 73.44583858163283, 68.95989308394235, 81.37379279404978, 80.03449720795577, 76.9753722023527, 85.38758868898952, 77.57858089337114, 81.51137830443959, 69.39453464927082], [79.05490813743891, 82.57175474588745, 100.47808393189733, 94.19017346552819, 90.62044073416831, 86.67348550838199, 81.39021426859301, 97.47559369943843, 78.4783487246383, 97.61600779326113], [103.8805897504941, 87.6138453569168, 69.53021410663507, 86.83265014521781, 79.61356714432172, 74.27675513842817, 93.35504465324233, 67.26422083718617, 76.60710563384201, 68.86565538874164], [72.1751861397816, 83.26815427139645, 89.25104330340503, 57.93275438683859, 88.16328416457856, 64.44941844285687, 81.17814017108077, 75.35245153063507, 72.83446171949794, 80.6235055166709], [70.01420743950389, 69.01092887117555, 62.068041887099014, 80.03693313033848, 67.2121020826814, 73.7517987430502, 57.23828827130473, 91.69630482022171, 75.38185655030702, 62.17710444349581], [70.45796725128052, 82.93079522877012, 93.90710168396662, 82.20539421635372, 88.8209743167828, 80.12996078383784, 85.2371726471552, 77.09894718108367, 74.83585008379207, 75.74829070539316], [84.29618437675727, 92.94865368301664, 87.24523190135072, 65.66361419151939, 86.76662410992634, 75.09700903745896, 101.72812826745401, 86.38633395885726, 81.09047730935539, 76.03332358687295]],
[[72.23101197513375, 63.809826851714305, 62.694019876966806, 63.976140276107444, 62.730861085378635, 72.73638426176352, 75.57088713391488, 65.83332035604461, 57.19116752181425, 73.34097066743698], [64.45651614654962, 71.05480561639838, 77.97203605304846, 73.34752065483389, 62.99308639777391, 60.48055616856617, 59.27240463668535, 69.20060886145616, 69.61298471801298, 79.23601483908023], [60.16672741875756, 71.78631095543044, 78.79232094318206, 65.4166410297331, 58.28927924983962, 77.70855219177933, 67.69855325003063, 75.28712814053775, 73.52211163770896, 70.27872019339274], [76.51758808809053, 56.61275796528609, 63.42550202340722, 73.64775498809733, 58.309696105796846, 65.08919183389315, 63.43686687088068, 66.66416250196782, 63.56125975008504, 67.97876736538639], [65.99449510860813, 67.21947050669957, 64.97501989413601, 65.29120589829468, 50.51127459781214, 66.4509605655127, 74.70815481850462, 70.12065820551626, 65.53347762200278, 62.07060636099543], [60.72560034646793, 50.95390834961491, 69.80108243036132, 63.4215584561741, 76.11629219229663, 73.22362750633465, 58.0157136655622, 68.93708408887993, 67.14845900045482, 65.51952024909666], [65.5886422367003, 60.51174408672078, 65.95109900620504, 62.258285135783595, 57.17977814784602, 71.59499173594294, 76.16264918946727, 56.728624161218875, 67.47408934043187, 71.0219424453976], [63.72050631987969, 75.60244083582113, 76.48429048179314, 65.69157768177199, 73.24452619463557, 65.09708304654129, 62.07655271058941, 67.76403026123226, 76.59588561614738, 78.96306000314819]]] # Replace with the data you've posted earlier

def holm_correction(p_values):
    sorted_indices = np.argsort(p_values)
    sorted_p = np.array(p_values)[sorted_indices]
    adjusted_p = np.empty_like(sorted_p)
    m = len(p_values)
    for i, p in enumerate(sorted_p):
        adjusted_p[i] = min((m - i) * p, 1.0)
    # Reorder back to original order
    adjusted_back = np.empty_like(adjusted_p)
    adjusted_back[sorted_indices] = adjusted_p
    return adjusted_back


def benjamini_hochberg(p_values, alpha=0.05):
    """Applies the BH FDR correction to a list of p-values."""
    p_values = np.array(p_values)
    n = len(p_values)
    sorted_indices = np.argsort(p_values)
    sorted_p = p_values[sorted_indices]

    thresholds = alpha * np.arange(1, n + 1) / n
    passed = sorted_p <= thresholds

    # Find largest index where p <= threshold
    max_index = np.where(passed)[0].max() if np.any(passed) else -1
    sig = np.zeros(n, dtype=bool)
    if max_index >= 0:
        sig[:max_index + 1] = True

    # Reorder back to original order
    result = np.zeros(n, dtype=bool)
    result[sorted_indices] = sig
    return result

for exp_idx, exp_data in enumerate(raw_data):
    print(f"\n===== Experiment {exp_idx + 1} =====")
    stat, p = stats.kruskal(*exp_data)
    print(f"Kruskal-Wallis H-test: H = {stat:.3f}, p = {p:.4f}")

    if p < 0.05:
        print("Significant differences found. Performing pairwise Mannâ€“Whitney U tests with Benjamini-Hochberg correction:")
        strategy_pairs = list(combinations(range(8), 2))
        raw_pvals = []
        labels = []

        for i, j in strategy_pairs:
            u_stat, p_val = stats.mannwhitneyu(exp_data[i], exp_data[j], alternative='two-sided')
            raw_pvals.append(p_val)
            labels.append((f"strategy_{i+1}", f"strategy_{j+1}"))

        significant = benjamini_hochberg(raw_pvals, alpha=0.05)

        for (s1, s2), raw_p, sig in zip(labels, raw_pvals, significant):
            star = "*" if sig else ""
            print(f"{s1} vs {s2}: raw p = {raw_p:.4f} {star}")
